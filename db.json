[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2022-02-06T22:59:06.322Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "О милых котиках", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2022-02-06T23:32:56.524Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2022-02-06T23:37:56.660Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435 \\u0442\\u0435\\u043c\\u044b\"]}}]"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view user", "content_type": 4, "codename": "view_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view content type", "content_type": 5, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view session", "content_type": 6, "codename": "view_session"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add Тема", "content_type": 7, "codename": "add_topic"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change Тема", "content_type": 7, "codename": "change_topic"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete Тема", "content_type": 7, "codename": "delete_topic"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view Тема", "content_type": 7, "codename": "view_topic"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add Новость", "content_type": 8, "codename": "add_post"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change Новость", "content_type": 8, "codename": "change_post"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete Новость", "content_type": 8, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view Новость", "content_type": 8, "codename": "view_post"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can add Закладка", "content_type": 9, "codename": "add_bookmarkpost"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can change Закладка", "content_type": 9, "codename": "change_bookmarkpost"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can delete Закладка", "content_type": 9, "codename": "delete_bookmarkpost"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can view Закладка", "content_type": 9, "codename": "view_bookmarkpost"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add profile", "content_type": 10, "codename": "add_profile"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change profile", "content_type": 10, "codename": "change_profile"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete profile", "content_type": 10, "codename": "delete_profile"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can view profile", "content_type": 10, "codename": "view_profile"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can add Закладка", "content_type": 11, "codename": "add_bookmarkuser"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can change Закладка", "content_type": 11, "codename": "change_bookmarkuser"}}, {"model": "auth.permission", "pk": 43, "fields": {"name": "Can delete Закладка", "content_type": 11, "codename": "delete_bookmarkuser"}}, {"model": "auth.permission", "pk": 44, "fields": {"name": "Can view Закладка", "content_type": 11, "codename": "view_bookmarkuser"}}, {"model": "auth.permission", "pk": 45, "fields": {"name": "Can add chat", "content_type": 12, "codename": "add_chat"}}, {"model": "auth.permission", "pk": 46, "fields": {"name": "Can change chat", "content_type": 12, "codename": "change_chat"}}, {"model": "auth.permission", "pk": 47, "fields": {"name": "Can delete chat", "content_type": 12, "codename": "delete_chat"}}, {"model": "auth.permission", "pk": 48, "fields": {"name": "Can view chat", "content_type": 12, "codename": "view_chat"}}, {"model": "auth.permission", "pk": 49, "fields": {"name": "Can add message", "content_type": 13, "codename": "add_message"}}, {"model": "auth.permission", "pk": 50, "fields": {"name": "Can change message", "content_type": 13, "codename": "change_message"}}, {"model": "auth.permission", "pk": 51, "fields": {"name": "Can delete message", "content_type": 13, "codename": "delete_message"}}, {"model": "auth.permission", "pk": 52, "fields": {"name": "Can view message", "content_type": 13, "codename": "view_message"}}, {"model": "auth.permission", "pk": 53, "fields": {"name": "Can add Лайки", "content_type": 14, "codename": "add_likedislike"}}, {"model": "auth.permission", "pk": 54, "fields": {"name": "Can change Лайки", "content_type": 14, "codename": "change_likedislike"}}, {"model": "auth.permission", "pk": 55, "fields": {"name": "Can delete Лайки", "content_type": 14, "codename": "delete_likedislike"}}, {"model": "auth.permission", "pk": 56, "fields": {"name": "Can view Лайки", "content_type": 14, "codename": "view_likedislike"}}, {"model": "auth.permission", "pk": 57, "fields": {"name": "Can add Комментарий", "content_type": 15, "codename": "add_comment"}}, {"model": "auth.permission", "pk": 58, "fields": {"name": "Can change Комментарий", "content_type": 15, "codename": "change_comment"}}, {"model": "auth.permission", "pk": 59, "fields": {"name": "Can delete Комментарий", "content_type": 15, "codename": "delete_comment"}}, {"model": "auth.permission", "pk": 60, "fields": {"name": "Can view Комментарий", "content_type": 15, "codename": "view_comment"}}, {"model": "auth.permission", "pk": 61, "fields": {"name": "Can add association", "content_type": 16, "codename": "add_association"}}, {"model": "auth.permission", "pk": 62, "fields": {"name": "Can change association", "content_type": 16, "codename": "change_association"}}, {"model": "auth.permission", "pk": 63, "fields": {"name": "Can delete association", "content_type": 16, "codename": "delete_association"}}, {"model": "auth.permission", "pk": 64, "fields": {"name": "Can view association", "content_type": 16, "codename": "view_association"}}, {"model": "auth.permission", "pk": 65, "fields": {"name": "Can add code", "content_type": 17, "codename": "add_code"}}, {"model": "auth.permission", "pk": 66, "fields": {"name": "Can change code", "content_type": 17, "codename": "change_code"}}, {"model": "auth.permission", "pk": 67, "fields": {"name": "Can delete code", "content_type": 17, "codename": "delete_code"}}, {"model": "auth.permission", "pk": 68, "fields": {"name": "Can view code", "content_type": 17, "codename": "view_code"}}, {"model": "auth.permission", "pk": 69, "fields": {"name": "Can add nonce", "content_type": 18, "codename": "add_nonce"}}, {"model": "auth.permission", "pk": 70, "fields": {"name": "Can change nonce", "content_type": 18, "codename": "change_nonce"}}, {"model": "auth.permission", "pk": 71, "fields": {"name": "Can delete nonce", "content_type": 18, "codename": "delete_nonce"}}, {"model": "auth.permission", "pk": 72, "fields": {"name": "Can view nonce", "content_type": 18, "codename": "view_nonce"}}, {"model": "auth.permission", "pk": 73, "fields": {"name": "Can add user social auth", "content_type": 19, "codename": "add_usersocialauth"}}, {"model": "auth.permission", "pk": 74, "fields": {"name": "Can change user social auth", "content_type": 19, "codename": "change_usersocialauth"}}, {"model": "auth.permission", "pk": 75, "fields": {"name": "Can delete user social auth", "content_type": 19, "codename": "delete_usersocialauth"}}, {"model": "auth.permission", "pk": 76, "fields": {"name": "Can view user social auth", "content_type": 19, "codename": "view_usersocialauth"}}, {"model": "auth.permission", "pk": 77, "fields": {"name": "Can add partial", "content_type": 20, "codename": "add_partial"}}, {"model": "auth.permission", "pk": 78, "fields": {"name": "Can change partial", "content_type": 20, "codename": "change_partial"}}, {"model": "auth.permission", "pk": 79, "fields": {"name": "Can delete partial", "content_type": 20, "codename": "delete_partial"}}, {"model": "auth.permission", "pk": 80, "fields": {"name": "Can view partial", "content_type": 20, "codename": "view_partial"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$216000$DXLGpVkpUwI0$GV+fFwTHm5vtrqdWZ9TXP4hcrsixnfJ6mUKnje5ZVu4=", "last_login": "2022-02-06T23:52:44.605Z", "is_superuser": true, "username": "admin", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2022-02-06T22:27:39.794Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$216000$looVddn9EUu9$q3f2XefGrka2kIcb4tqGc4+fr7xWS0uAX6JgjWgnhwk=", "last_login": "2022-02-06T23:48:13.879Z", "is_superuser": false, "username": "cooh", "first_name": "Юрий", "last_name": "Янков", "email": "yankovyurii@yandex.ru", "is_staff": false, "is_active": true, "date_joined": "2022-02-06T23:48:03.629Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 3, "fields": {"password": "pbkdf2_sha256$216000$ocYfsprSr0Ds$tNuF/euoOrGh6hMo7uOyInwg7cXdcYJSppn+DrJLc4Y=", "last_login": "2022-02-06T23:54:20.210Z", "is_superuser": true, "username": "admin1", "first_name": "", "last_name": "", "email": "", "is_staff": true, "is_active": true, "date_joined": "2022-02-06T23:50:50.104Z", "groups": [], "user_permissions": []}}, {"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "blog", "model": "topic"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "blog", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "blog", "model": "bookmarkpost"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "users", "model": "profile"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "users", "model": "bookmarkuser"}}, {"model": "contenttypes.contenttype", "pk": 12, "fields": {"app_label": "users", "model": "chat"}}, {"model": "contenttypes.contenttype", "pk": 13, "fields": {"app_label": "users", "model": "message"}}, {"model": "contenttypes.contenttype", "pk": 14, "fields": {"app_label": "app_ct", "model": "likedislike"}}, {"model": "contenttypes.contenttype", "pk": 15, "fields": {"app_label": "app_ct", "model": "comment"}}, {"model": "contenttypes.contenttype", "pk": 16, "fields": {"app_label": "social_django", "model": "association"}}, {"model": "contenttypes.contenttype", "pk": 17, "fields": {"app_label": "social_django", "model": "code"}}, {"model": "contenttypes.contenttype", "pk": 18, "fields": {"app_label": "social_django", "model": "nonce"}}, {"model": "contenttypes.contenttype", "pk": 19, "fields": {"app_label": "social_django", "model": "usersocialauth"}}, {"model": "contenttypes.contenttype", "pk": 20, "fields": {"app_label": "social_django", "model": "partial"}}, {"model": "blog.topic", "pk": 1, "fields": {"img": "topic_images/2654678146.jpg", "title": "О милых котиках"}}, {"model": "blog.topic", "pk": 2, "fields": {"img": "topic_images/i_1.jpg", "title": "Django"}}, {"model": "blog.post", "pk": 1, "fields": {"title": "Котики милые", "text": "<p>Котики милые<img alt=\"heart\" src=\"http://127.0.0.1:8000/static/ckeditor/ckeditor/plugins/smiley/images/heart.png\" style=\"height:23px; width:23px\" title=\"heart\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://kotey-ka.ru/wp-content/uploads/2017/04/inteligencia-gatos.jpg\" style=\"height:334px; width:500px\" /></p>", "date": "2022-02-06T23:28:51.286Z", "author": 1, "topic": 1, "views": 2}}, {"model": "blog.post", "pk": 2, "fields": {"title": "Django Channels", "text": "<p>Channels - это проект, который использует Django и расширяет его возможности за пределы HTTP - для обработки WebSocket&rsquo;ов, протоколов чата, IoT-протоколов и многого другого. Он построен на спецификации Python под названием&nbsp;<a href=\"http://asgi.readthedocs.io/\">ASGI</a>.</p>\r\n\r\n<p>Channels основаны на встроенной поддержке ASGI, доступной в Django начиная с версии 3.0, и обеспечивают саму реализацию для Django v2.2. Django по-прежнему обрабатывает традиционный HTTP, в то время как Channels дают вам возможность обрабатывать другие соединения в синхронном или асинхронном стиле.</p>\r\n\r\n<p>Чтобы начать разбираться в Channels, прочтите&nbsp;Introduction, в котором рассказывается, как все работает. Если вы обновляетесь с Channels 2, взгляните на&nbsp;Release/3.0.0, чтобы получить обзор изменений.</p>\r\n\r\n<h2>Проекты<a href=\"https://django.fun/docs/channels/ru/3/#projects\" title=\"Ссылка на этот заголовок\">&para;</a></h2>\r\n\r\n<p>Channels состоят из нескольких пакетов:</p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><a href=\"https://github.com/django/channels/\">Channels</a>, слой интеграции с Django</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><a href=\"https://github.com/django/daphne/\">Daphne</a>, сервер HTTP и Websocket</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><a href=\"https://github.com/django/asgiref/\">asgiref</a>, базовая библиотека ASGI</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><a href=\"https://github.com/django/channels_redis/\">channel_redis</a>, серверная часть для работы Channels с Redis (необязательно)</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>Эта документация охватывает систему в целом; отдельные примечания к выпуску и инструкции можно найти в отдельных репозиториях.</p>", "date": "2022-02-06T23:36:37.833Z", "author": 1, "topic": 2, "views": 5}}, {"model": "blog.post", "pk": 3, "fields": {"title": "Django Rest Framework", "text": "<p>В этой статье разберёмся, как сделать REST API на базе Django Rest Framework, чтобы получить по GET-запросу набор записей из базы данных (БД). Иными словами, рассмотрим, как DRF работает на чтение (о том, как с помощью него создавать, изменять и удалять записи в БД, поговорим в отдельной статье).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Общую схему решения этой задачи мы рассмотрим в первой части статьи. Вторая будет посвящена детальному разбору процесса сериализации данных.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://habrastorage.org/r/w1560/webt/dn/kf/sf/dnkfsf4d8gmnnxmf1qr2x6j_r6y.png\" style=\"height:333px; width:600px\" /></p>\r\n\r\n<p><a name=\"habracut\"></a></p>\r\n\r\n<p>Несколько вводных замечаний:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Учебный проект, на основе которого даны все примеры в статье, можно найти&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1\">в репозитории на Гитхабе</a>.</li>\r\n\t<li>Стиль и объём изложения рассчитаны на тех, кто не знаком с DRF и только начинает свой путь в разработке.</li>\r\n\t<li>Предполагается, что читатель в общих чертах уже знаком с Django и знает основы ООП на Python.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Надеюсь, статья станет хорошим подспорьем изучения DRF и работы с его документацией, прояснит процесс сериализации данных и даст уверенность, что любая магия исчезает, стоит только покопаться под капотом конкретной библиотеки.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>API для сайта на Django: общая схема</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Задача</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>На локальном сервере работает одностраничный сайт на Django. На единственной странице сайта по адресу&nbsp;<code>http://localhost:8000</code>&nbsp;пользователи видят информацию о четырёх североевропейских столицах. Информация попадает на страницу из подключённой к сайту базы данных, в которой есть модель Capital с пятью полями:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>id</th>\r\n\t\t\t<th>country</th>\r\n\t\t\t<th>capital_city</th>\r\n\t\t\t<th>capital_population</th>\r\n\t\t\t<th>author (FK)</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>1</td>\r\n\t\t\t<td>Norway</td>\r\n\t\t\t<td>Oslo</td>\r\n\t\t\t<td>693500</td>\r\n\t\t\t<td>1</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>2</td>\r\n\t\t\t<td>Sweden</td>\r\n\t\t\t<td>Stockholm</td>\r\n\t\t\t<td>961600</td>\r\n\t\t\t<td>1</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>3</td>\r\n\t\t\t<td>Finland</td>\r\n\t\t\t<td>Helsinki</td>\r\n\t\t\t<td>655300</td>\r\n\t\t\t<td>1</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>Iceland</td>\r\n\t\t\t<td>Reykjavik</td>\r\n\t\t\t<td>128800</td>\r\n\t\t\t<td>1</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Поле&nbsp;<code>author</code>&nbsp;через внешний ключ (foreign key) связано&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/7904f82905a3d5c561a644a2aa1fc313baab9fcd/capitals/models.py#L6\">с моделью User</a>, в которой есть вся информация о пользователе с конкретным id.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Мы хотим получить информацию из базы данных, не открывая сайт в браузере, а сделав запрос из другого Python-приложения.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В каком виде нужно получить информацию:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Набор информации должен быть списком из Python-словарей: ключ &mdash; название поля записи в таблице Capital, значение &mdash; содержимое конкретного поля.</li>\r\n\t<li>Названия стран нас не интересуют &mdash; нам нужны названия столиц, численность населения, а также имя сотрудника, который внёс запись в базу. Имя получаем через id автора, указанный в поле&nbsp;<code>author</code>.</li>\r\n\t<li>Для передачи по сети полученные из БД данные должны быть конвертированы в json-формат.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Таким образом, каждую запись, которая при извлечении из базы данных является Python-объектом, принимающее приложение после декодирования json-строки должно получать в виде словаря:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>{\r\n  &#39;capital_city&#39;: &#39;Oslo&#39;,\r\n  &#39;capital_population&#39;: 693500,\r\n  &#39;author&#39;: &#39;test_user&#39;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В этом и состоит одно из назначений API &mdash; дать возможность различным приложениям доставать из БД сайта информацию в виде структуры данных, которую дальше можно обрабатывать.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Решаем задачу с помощью Django Rest Framework</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Задача решается в два шага:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Сложный объект (набор записей из Django-модели) нужно превратить в более простую структуру, в нашем случае в список словарей. Понадобится&nbsp;<a href=\"https://ilyachch.gitbook.io/django-rest-framework-russian-documentation/overview/navigaciya-po-api/serializers#cerializatory\">сериалайзер</a>.</li>\r\n\t<li>Сериализованные данные для дальнейшей передачи по сети нужно перевести (отрендерить)&nbsp;<a href=\"https://www.json.org/json-ru.html\">в json-формат</a>&nbsp;&mdash; универсальный текстовый формат передачи данных, не зависящий от языка реализации. Понадобится рендер.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Небольшое отступление о json. Базовые структуры данных на python кодируются в json и&nbsp;<a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\">декодируются</a>&nbsp;обратно следующим образом:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Python</th>\r\n\t\t\t<th>JSON</th>\r\n\t\t\t<th>Пример Python</th>\r\n\t\t\t<th>Пример JSON</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>dict</td>\r\n\t\t\t<td>object</td>\r\n\t\t\t<td>{&#39;ключ&#39;: &#39;значение&#39;}</td>\r\n\t\t\t<td>{&quot;ключ&quot;: &quot;значение&quot;}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>list, tuple</td>\r\n\t\t\t<td>array</td>\r\n\t\t\t<td>[&#39;элемент1&#39;, &#39;элемент2&#39;], (&#39;элемент1&#39;, &#39;элемент2&#39;)</td>\r\n\t\t\t<td>[&quot;элемент1&quot;, &quot;элемент2&quot;]</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>str</td>\r\n\t\t\t<td>string</td>\r\n\t\t\t<td>&#39;элемент1&#39;</td>\r\n\t\t\t<td>&quot;элемент1&quot;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>int, float, int- &amp; float-derived Enums</td>\r\n\t\t\t<td>number</td>\r\n\t\t\t<td>5, 4.2</td>\r\n\t\t\t<td>5, 4.2</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>True</td>\r\n\t\t\t<td>true</td>\r\n\t\t\t<td>True</td>\r\n\t\t\t<td>true</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>False</td>\r\n\t\t\t<td>false</td>\r\n\t\t\t<td>False</td>\r\n\t\t\t<td>false</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>None</td>\r\n\t\t\t<td>null</td>\r\n\t\t\t<td>None</td>\r\n\t\t\t<td>null</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Создаём сериалайзер</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Каждая запись в таблице Capital &mdash; объект. И как у любого объекта, у записи есть свои атрибуты. Изучим их на примере первой записи о столице Норвегии, воспользовавшись атрибутом&nbsp;<code>__dict__</code>. Нам доступен&nbsp;<a href=\"https://docs.python.org/3/library/stdtypes.html#object.__dict__\">словарь</a>, который хранит информацию о динамических (writable) атрибутах объекта:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>Capital.objects.first().__dict__\r\n\r\n{\r\n    &#39;_state&#39;: &lt;django.db.models.base.ModelState object at 0x00000126F2DB0BB0&gt;,\r\n    &#39;id&#39;: 1,\r\n    &#39;country&#39;: &#39;Norway&#39;,\r\n    &#39;capital_city&#39;: &#39;Oslo&#39;,\r\n    &#39;capital_population&#39;: 693500, \r\n    &#39;author_id&#39;: 1\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Каждое поле модели Capital &mdash; атрибут объекта конкретной записи. При этом&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/e20e8e8dc418caea3e5264ccd52228995a1667b7/capitals/models.py#L10\"><code>поле author</code></a>, которое через&nbsp;<a href=\"https://www.djbook.ru/rel3.0/ref/models/fields.html#foreignkey\">внешний ключ</a>&nbsp;связано с моделью User и содержит id объектов из неё, в атрибуте записи и в БД получает&nbsp;<a href=\"https://www.djbook.ru/rel3.0/ref/models/fields.html#database-representation\">приставку</a>&nbsp;<code>_id</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Сериалайзер поможет достать данные из нужных атрибутов (полей) записи и сформировать упорядоченный python-словарь &mdash; объект класса&nbsp;<code>OrderedDict</code>. Отмечу, что в Python с версии 3.7 и &laquo;обычные&raquo; словари&nbsp;<a href=\"https://docs.python.org/3.7/whatsnew/3.7.html#summary-release-highlights\">стали сохранять</a>&nbsp;порядок вставки пар &laquo;ключ &mdash; значение&raquo;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Для сериалайзера нужно описать поля: каждое поле будет отвечать за извлечение и представление данных из корреспондирующего поля табличной записи.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Важный момент:</strong>&nbsp;здесь мы рассматриваем сериалайзер на основе базового класса&nbsp;<code>Serializer</code>, чтобы лучше понять принципы его работы. На более высоком уровне абстракции есть&nbsp;<a href=\"https://ilyachch.gitbook.io/django-rest-framework-russian-documentation/overview/navigaciya-po-api/serializers#modelserializer\"><code>класс ModelSerializer</code></a>, который позволяет частично уйти от ручного создания полей. В этой статье он не рассматривается.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Нас интересуют данные, которые есть в трёх полях каждой табличной записи:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>поле&nbsp;<code>capital_city</code>,</li>\r\n\t<li>поле&nbsp;<code>capital_population</code>,</li>\r\n\t<li>поле&nbsp;<code>author</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Значит, в сериалайзере должно быть тоже три атрибута-поля.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>При создании поля сериалайзера нужно определиться с названием поля и его типом. Назвать поля сериалайзера можно как угодно: именно эти названия будут ключами в словаре, в который сериалайзер преобразует запись из таблицы.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Вот примеры трёх вариантов названий полей сериалайзера:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://habrastorage.org/r/w1560/webt/8q/py/ix/8qpyixotc6_titswyvknxevt4uo.png\" style=\"height:247px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Но как сериалайзер понимает, в каком порядке стыковать собственные поля с полями табличной записи? Например, если поле сериалайзера условно называется&nbsp;<code>a</code>, то как он определяет, что его нужно состыковать с полем записи&nbsp;<code>capital_city</code>?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Логика такая:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>При создании поля сериалайзера можно передать аргумент&nbsp;<code>source</code>&nbsp;и в качестве значения указать название поля табличной записи, данные из которого будут пропускаться через поле сериалайзера. Продолжая пример, если поле сериалайзера названо&nbsp;<code>a</code>&nbsp;и при этом указано&nbsp;<code>source=&#39;capital_city&#39;</code>, то из табличной записи будут извлекаться данные атрибута (поля)&nbsp;<code>capital_city</code>. Именно поэтому на выходе сформируется пара&nbsp;<code>&quot;a&quot;: &quot;Oslo&quot;</code>.</li>\r\n\t<li>Через точечную нотацию в аргументе source можно передать значение объекта из записи, с которой сериализуемая запись связана через внешний ключ. Так можно достать имя автора из таблицы пользователей, указав&nbsp;<code>source=&#39;author.username&#39;</code>.</li>\r\n\t<li>Если аргумент source не передан, то сериалайзер будет искать в табличной записи атрибут с тем же названием, что и название поля сериалайзера. Если не найдёт, появится&nbsp;<a href=\"https://docs.python.org/3/library/exceptions.html#AttributeError\"><code>ошибка AttributeError</code></a>.</li>\r\n\t<li>Если передать в аргументе&nbsp;<code>source</code>&nbsp;значение, которое совпадает с названием поля сериалайзера, возникнет&nbsp;<a href=\"https://docs.python.org/3/library/exceptions.html#AssertionError\"><code>ошибка AssertionError</code></a>, a DRF предупредит:&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/71e6c30034a1dd35a39ca74f86c371713e762c79/rest_framework/fields.py#L375\">такое дублирование избыточно</a>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Теперь нужно выбрать тип поля сериалайзера. Его нужно соотнести с тем, какие данные извлекаются из корреспондирующего поля табличной записи. Дело в том, что у каждого поля сериалайзера есть собственный метод&nbsp;<code>to_representation</code>. Как следует из названия, задача метода &mdash; представить извлечённые из записи данные в определённом виде.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Например, есть поле&nbsp;<code>serializers.IntegerField</code>. Посмотрим на его&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/master/rest_framework/fields.py#L962\"><code>метод to_representation</code></a>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>class IntegerField(Field):\r\n    . . .\r\n    def to_representation(self, value):\r\n        return int(value)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Очевидно, этот тип поля сериалайзера нельзя выбирать для данных из табличной записи о названии столицы:&nbsp;<code>int(&#39;Осло&#39;)</code>&nbsp;вызовет&nbsp;<a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\">ValueError</a>. А вот для данных о численности населения &mdash; самое то.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Выберем следующие типы полей сериалайзера:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Название поля в таблице (модели)</th>\r\n\t\t\t<th>Тип поля в таблице (модели)</th>\r\n\t\t\t<th>Тип корреспондирующего поля сериалайзера</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>capital_city</td>\r\n\t\t\t<td>models.CharField</td>\r\n\t\t\t<td>serializers.CharField</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>capital_population</td>\r\n\t\t\t<td>models.IntegerField</td>\r\n\t\t\t<td>serializers.IntegerField</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>author</td>\r\n\t\t\t<td>models.ForeignKey</td>\r\n\t\t\t<td>serializers.CharField</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>О соотношении полей сериалайзера и полей Django-моделей можно прочитать&nbsp;<a href=\"https://ilyachch.gitbook.io/django-rest-framework-russian-documentation/overview/navigaciya-po-api/fields#logicheskie-polya\">в документации DRF</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Код сериалайзера разместим в том же приложении, где находится Django-модель, под именем&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/master/capitals/serializers.py\">serializers.py</a>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code># capitals/serializers.py\r\nfrom rest_framework import serializers\r\n\r\nclass CapitalSerializer(serializers.Serializer):\r\n    capital_city = serializers.CharField(max_length=200)\r\n    capital_population = serializers.IntegerField()\r\n    author = serializers.CharField(source=&#39;author.username&#39;, max_length=200)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В поле&nbsp;<code>CharField</code>&nbsp;указан необязательный параметр&nbsp;<code>max_length</code>, благодаря которому задаётся максимально допустимая длина передаваемого значения. О других параметрах поля написано&nbsp;<a href=\"https://ilyachch.gitbook.io/django-rest-framework-russian-documentation/overview/navigaciya-po-api/fields#charfield\">в документации</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Для полей сериалайзера&nbsp;<code>capital_city</code>&nbsp;и&nbsp;<code>capital_population</code>&nbsp;мы не передаём аргумент&nbsp;<code>source</code>&nbsp;&mdash; названия поля сериалайзера и корреспондирующего поля табличной записи совпадают. Для поля&nbsp;<code>author</code>, наоборот, нужен аргумент&nbsp;<code>source</code>. В поле&nbsp;<code>author</code>&nbsp;модели Capital есть только id автора, а нам нужен его username. За этим значением мы идём в таблицу с данными о пользователях, с которой поле&nbsp;<code>author</code>&nbsp;связано по внешнему ключу. Используем точечную нотацию&nbsp;<code>author.username</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Пропущенный через сериалайзер набор табличных записей доступен в атрибуте сериалайзера&nbsp;<code>data</code>. Посмотрим на содержимое этого атрибута, создав тестовый вариант сериалайзера.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Сериалайзер в действии</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Обратимся к файлу&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/master/serializer_example_1.py\"><code>serializer_example_1.py</code></a>. Он имитирует работу сериалайзера без необходимости запускать сервер и делать запрос к сайту. После клонирования учебного проекта и установки зависимостей (<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/master/README.md\">шаги 1&mdash;6 из ридми</a>) достаточно запустить файл как обычный Python-скрипт и посмотреть в консоли результат его работы.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В&nbsp;<code>serializer_example_1.py</code>&nbsp;созданы классы с данными об авторах и о столицах для записей в таблицах:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>class User:\r\n    def __init__(self, username):\r\n        self.username = username\r\n\r\nclass Capital:\r\n    def __init__(self, country, capital_city, capital_population, user: User):\r\n        self.country = country\r\n        self.capital_city = capital_city\r\n        self.capital_population = capital_population\r\n        self.author = user</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Созданы объекты соответствующих записей:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>author_obj = User(&#39;test_user&#39;)\r\ncapital_1 = Capital(&#39;Norway&#39;, &#39;Oslo&#39;, 693500, author_obj)\r\n. . . </code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Объединены записи в список по подобию кверисета из Django-модели:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>queryset = [capital_1, capital_2, capital_3, capital_4]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Объявлен класс сериалайзера: код идентичен тому, который был приведён выше для&nbsp;<code>class CapitalSerializer(serializers.Serializer)</code>. Затем создали его экземпляр:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>serializer_obj = CapitalSerializer(instance=queryset, many=True)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>При создании мы передали сериалайзеру набор записей, которые нужно преобразовать. Они передаются в аргументе&nbsp;<code>instance</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Кроме того, мы указали аргумент&nbsp;<code>many</code>&nbsp;со значением&nbsp;<code>True</code>. Дело в том, что логика работы сериалайзера с одной записью и с набором записей разная. Указывая&nbsp;<code>many=True</code>, мы включаем логику обработки набора записей. В чём она заключается, расскажу во второй части статьи при детальном разборе работы сериалайзера.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Выведем в консоль содержимое атрибута&nbsp;<code>data</code>&nbsp;сериалайзера:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code># serializer_obj.data\r\n[\r\n    OrderedDict([(&#39;capital_city&#39;, &#39;Oslo&#39;), (&#39;capital_population&#39;, 693500),\r\n                 (&#39;author&#39;, &#39;test_user&#39;)]),\r\n    OrderedDict([(&#39;capital_city&#39;, &#39;Stockholm&#39;), (&#39;capital_population&#39;, 961600), \r\n                 (&#39;author&#39;, &#39;test_user&#39;)]),\r\n    ...\r\n]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Каждая запись из набора превратилась в упорядоченный словарь класса&nbsp;<code>OrderedDict</code>. Он находится в Python-модуле&nbsp;<code>collections</code>. Поэтому, если взглянуть на строки импорта&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/master/rest_framework/serializers.py#L16\">в исходном коде</a>&nbsp;<code>restframework.serializers</code>, можно увидеть:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>from collections import OrderedDict, defaultdict</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В каждом&nbsp;<code>OrderedDict</code>&nbsp;содержится информация только из тех полей табличных записей, которые были состыкованы с полями сериалайзера. Данных о содержимом поля&nbsp;<code>country</code>&nbsp;нет &mdash; сериалайзер не настроен доставать эту информацию, потому что мы не создавали корреспондирующего поля в сериалайзере.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Отображаем (рендерим) информацию в формате json</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Нам понадобится рендер &mdash; объект класса&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/71e6c30034a1dd35a39ca74f86c371713e762c79/rest_framework/renderers.py#L53\"><code>JSONRenderer</code></a>. В файле&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/master/serializer_example_2.py\"><code>serializer_example_2.py</code></a>&nbsp;мы дополнили импорт &mdash; помимо модуля сериалайзеров из&nbsp;<code>restframework</code>&nbsp;мы импортировали модуль рендеров.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Далее необходимо создать экземпляр рендера нужного типа и вызвать у него метод&nbsp;<code>render</code>:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>json_render_for_our_data = renderers.JSONRenderer()\r\ndata_in_json = json_render_for_our_data.render(serializer_obj.data)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В результате мы увидим байтовую строку с массивом json-объектов:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>b&#39;[{&quot;capital_city&quot;:&quot;Oslo&quot;,&quot;capital_population&quot;:693500,&quot;author&quot;:&quot;test_user&quot;},{&quot;capital_city&quot;:&quot;Stockholm&quot;,&quot;capital_population&quot;:961600,&quot;author&quot;:&quot;test_user&quot;},...]&#39;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Эта байтовая строка и будет передаваться по сети в атрибуте ответа&nbsp;<code>content</code>, а принимающее приложение будет её декодировать в список из Python-словарей и вытаскивать нужную информацию из каждого.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Что нужно ещё</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Итак, мы испытали сериалайзер и посмотрели, как пропущенный через него набор табличных записей был преобразован в json-формат.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Чтобы сайт начал отдавать сериализованные данные, остаётся описать контроллер (view) и указать url-маршрут &mdash; эндпоинт, при обращении к которому сайт будет отдавать данные о столичных городах.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Контроллер</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Во&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/master/capitals/views.py\"><code>views.py</code></a>&nbsp;создадим класс контроллера. Нам понадобятся следующие инструменты DRF:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li><a href=\"https://github.com/encode/django-rest-framework/blob/3875d3284e73ed4d8e36c07d9b70c1b22c9d5998/rest_framework/views.py#L104\"><code>класс APIView</code></a>, который служит каркасом для контроллера;</li>\r\n\t<li><a href=\"https://github.com/encode/django-rest-framework/blob/3875d3284e73ed4d8e36c07d9b70c1b22c9d5998/rest_framework/response.py#L14\"><code>класс Response</code></a>, с помощью которого будет создан объект ответа на запрос. Похожая схема есть в &laquo;классическом&raquo; Django, где в ответ на&nbsp;<code>HTTPRequest</code>&nbsp;<a href=\"https://docs.djangoproject.com/en/3.1/ref/request-response/#quick-overview\">должен возвращаться</a>&nbsp;<code>HTTPResponse</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Внутри контроллера описываем один метод &mdash; get. Почему он называется именно так?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Логика класса-родителя&nbsp;<code>APIView</code>, а значит, и класса контроллера, такова: в контроллере запускается метод, чьё имя совпадает&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/3875d3284e73ed4d8e36c07d9b70c1b22c9d5998/rest_framework/views.py#L500\">с именем метода поступившего http-запроса</a>&nbsp;в нижнем регистре. Ровно так же работает&nbsp;<a href=\"https://github.com/django/django/blob/main/django/views/generic/base.py#L97\">родительский View-класс в Django</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Пример: если поступил GET-запрос, то будет задействован метод get контроллера.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В методе&nbsp;<code>get</code>&nbsp;опишем ту же логику, что и в файле с пробным запуском сериалайзера:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>Подготовить набор записей.</li>\r\n\t<li>Создать экземпляр сериалайзера, который может обрабатывать не отдельную запись, а их набор (<code>many=True</code>).</li>\r\n\t<li>Отрендерить в json-формат данные, полученные от сериалайзера.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code># capitals/views.py\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.views import APIView\r\n\r\nfrom .models import Capital\r\nfrom .serializers import CapitalSerializer\r\n\r\nclass GetCapitalInfoView(APIView):\r\n    def get(self, request):\r\n        # Получаем набор всех записей из таблицы Capital\r\n        queryset = Capital.objects.all()\r\n        # Сериализуем извлечённый набор записей\r\n        serializer_for_queryset = CapitalSerializer(\r\n            instance=queryset, # Передаём набор записей\r\n            many=True # Указываем, что на вход подаётся именно набор записей\r\n        )\r\n        return Response(serializer_for_queryset.data)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В отличие от файла&nbsp;<code>serializer_example_2.py</code>, где мы явно прописывали json-рендер и вызывали у него метод&nbsp;<code>render</code>, в коде контроллера ничего такого нет. Но рендер всё равно отработает: его работа описана под капотом внутри класса-родителя&nbsp;<code>APIView</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>После того как отработал метод get, работа контроллера выглядит так:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>Объект ответа, который вернул метод get (<code>return Response({&#39;capitals&#39;: serializer_for_queryset.data}</code>), передаётся в метод&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/71e6c30034a1dd35a39ca74f86c371713e762c79/rest_framework/views.py#L418\"><code>finalize_response</code></a>&nbsp;родительского класса&nbsp;<code>APIView</code>.</li>\r\n\t<li>В методе&nbsp;<code>finalize_response</code>&nbsp;объекту ответа добавляются атрибуты:\r\n\t<ul>\r\n\t\t<li><code>accepted_renderer</code>&nbsp;&mdash; им как раз выступает объект JSONRenderer,</li>\r\n\t\t<li><code>accepted_media_type</code>&nbsp;&mdash; &#39;application/json&#39;,</li>\r\n\t\t<li><code>context</code>.</li>\r\n\t</ul>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Благодаря этим атрибутам формируется&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/71e6c30034a1dd35a39ca74f86c371713e762c79/rest_framework/response.py#L50\"><code>rendered_content</code></a>: у экземпляра JSONRenderer срабатывает метод&nbsp;<code>render</code>, который возвращает байтовую строку с данными&nbsp;<a href=\"https://github.com/encode/django-rest-framework/blob/71e6c30034a1dd35a39ca74f86c371713e762c79/rest_framework/renderers.py#L85\">в json-формат</a>. Она помещается в атрибут ответа&nbsp;<code>content</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Маршрут (эндпоинт)</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Здесь та же схема действий, как в классическом Django. Подключаем маршруты приложения capitals:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code># config/urls.py\r\nfrom django.urls import include, path\r\n\r\nurlpatterns = [\r\n    path(&#39;&#39;, include(&#39;capitals.urls&#39;)),\r\n]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Прописываем сам маршрут в приложении&nbsp;<code>capitals</code>&nbsp;и связываем маршрут с контроллером:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code># capitals/urls.py\r\nfrom django.urls import path\r\n\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    path(&#39;api/capitals/&#39;, views.GetCapitalInfoView.as_view()),\r\n]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>API в действии</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Чтобы посмотреть, как работает API, можно:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>Подготовить Python-скрипт, который будет отправлять запрос на адрес&nbsp;<code>http://localhost:8000/api/capitals/</code>&nbsp;и что-то делать с полученным контентом.</li>\r\n\t<li>Запустить локальный сервер, на котором работает сайт &mdash;&nbsp;<code>python manage.py runserver</code>.</li>\r\n\t<li>Запустить в терминале Python-скрипт.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Первый шаг уже сделан: в корне учебного проекта есть файл&nbsp;<a href=\"https://github.com/stasyao/drf_guide_part_1/blob/master/get_info_from_our_site.py\"><code>get_info_from_our_site.py</code></a>. Этот скрипт делает запрос к&nbsp;<code>http://localhost:8000/api/capitals/</code>, декодирует полученный json-ответ и записывает информацию о столицах и их населении в текстовый файл.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Осталось выполнить шаги 2 и 3.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Если всё отработало штатно, в корневой директории проекта появится файл&nbsp;<code>capitals.txt</code>&nbsp;со следующим содержимым:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>The population of Oslo is 693500, author - test_user\r\nThe population of Stockholm is 961600, author - test_user\r\nThe population of Helsinki is 655300, author - test_user\r\nThe population of Reykjavik is 128800, author - test_user</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Несмотря на то, что пример наивный, он показывает главное: как мы научили<br />\r\nвеб-приложение отдавать информацию из базы данных в ответ на запрос, который поступает не от человека через браузер, а от другого приложения. И далее &mdash; как это приложение использует полученную информацию.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Browsable API &mdash; удобный инструмент для тестирования API на DRF</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Django Rest Framework позволяет посмотреть в браузере, какую информацию будет отдавать API при обращении к конкретному маршруту (эндпоинту). Достаточно ввести маршрут в адресную строку, и откроется страница с данными о запросе и результате его выполнения. За такое отображение отвечает&nbsp;<a href=\"https://www.django-rest-framework.org/api-guide/renderers/#browsableapirenderer\">BrowsableAPIRenderer</a>.</p>", "date": "2022-02-06T23:40:52.835Z", "author": 1, "topic": 2, "views": 7}}, {"model": "blog.bookmarkpost", "pk": 1, "fields": {"user": 1, "obj": 1, "created_at": "2022-02-06T23:28:58.031Z"}}, {"model": "blog.bookmarkpost", "pk": 2, "fields": {"user": 1, "obj": 2, "created_at": "2022-02-06T23:37:23.765Z"}}, {"model": "blog.bookmarkpost", "pk": 3, "fields": {"user": 1, "obj": 3, "created_at": "2022-02-06T23:47:11.040Z"}}, {"model": "users.profile", "pk": 1, "fields": {"user": 1, "bio": "", "mobile_number": "", "img": "user_images/1489052030_kotik-hosiko-12.jpg"}}, {"model": "users.profile", "pk": 2, "fields": {"user": 2, "bio": "Напиши мне в лс!", "mobile_number": "+79313206430", "img": "user_images/2654678146.jpg"}}, {"model": "users.profile", "pk": 3, "fields": {"user": 3, "bio": "", "mobile_number": "", "img": "default.png"}}, {"model": "users.bookmarkuser", "pk": 2, "fields": {"user": 2, "who_added": 1, "created_at": "2022-02-06T23:49:26.649Z"}}, {"model": "users.chat", "pk": 1, "fields": {"members": [1, 2]}}, {"model": "users.chat", "pk": 2, "fields": {"members": [2, 3]}}, {"model": "users.chat", "pk": 3, "fields": {"members": [1, 3]}}, {"model": "users.message", "pk": 1, "fields": {"chat": 1, "author": 2, "message": "qq", "pub_date": "2022-02-06T23:49:39.910Z", "is_readed": false}}, {"model": "users.message", "pk": 2, "fields": {"chat": 2, "author": 2, "message": "хехе", "pub_date": "2022-02-06T23:51:08.081Z", "is_readed": false}}, {"model": "users.message", "pk": 3, "fields": {"chat": 3, "author": 3, "message": "раз", "pub_date": "2022-02-06T23:54:42.091Z", "is_readed": false}}, {"model": "users.message", "pk": 4, "fields": {"chat": 3, "author": 3, "message": "два", "pub_date": "2022-02-06T23:54:48.368Z", "is_readed": false}}, {"model": "users.message", "pk": 5, "fields": {"chat": 3, "author": 3, "message": "три", "pub_date": "2022-02-06T23:54:54.435Z", "is_readed": false}}, {"model": "app_ct.likedislike", "pk": 1, "fields": {"content_type": 8, "object_id": 1, "like": [1], "dis_like": []}}, {"model": "app_ct.likedislike", "pk": 2, "fields": {"content_type": 8, "object_id": 2, "like": [1], "dis_like": []}}, {"model": "app_ct.likedislike", "pk": 3, "fields": {"content_type": 8, "object_id": 3, "like": [1], "dis_like": []}}, {"model": "app_ct.comment", "pk": 1, "fields": {"content_type": 8, "object_id": 1, "text": "<p>Котики вообще оболденные.&nbsp;</p>", "created_at": "2022-02-06T23:29:10.720Z", "author": 1}}, {"model": "app_ct.comment", "pk": 2, "fields": {"content_type": 8, "object_id": 2, "text": "<p>Это предстоит мне изучать!&nbsp;</p>", "created_at": "2022-02-06T23:37:15.820Z", "author": 1}}, {"model": "app_ct.comment", "pk": 3, "fields": {"content_type": 8, "object_id": 3, "text": "<p>!</p>", "created_at": "2022-02-06T23:47:13.527Z", "author": 1}}]